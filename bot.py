import os
import asyncio
import logging
import sqlite3
from datetime import datetime, date, time, timedelta
from zoneinfo import ZoneInfo

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, ContextTypes, ConversationHandler,
    MessageHandler, CallbackQueryHandler, filters
)

# =====================
# Basic setup
# =====================
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
logger = logging.getLogger(__name__)

TZ = ZoneInfo("Europe/Prague")  # Your timezone
DB_PATH = os.getenv("BOT_DB", "bot.db")
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    raise RuntimeError("Please set BOT_TOKEN environment variable with your BotFather token.")

# =====================
# Database helpers
# =====================

def db():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn


def init_db():
    conn = db()
    cur = conn.cursor()
    cur.execute(
        """
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL UNIQUE,
            chat_id INTEGER NOT NULL,
            username TEXT
        );
        """
    )
    cur.execute(
        """
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            name TEXT NOT NULL,
            time_str TEXT NOT NULL,          -- HH:MM 24h
            days TEXT NOT NULL,              -- comma-separated ISO weekday numbers 1..7
            created_at TEXT NOT NULL
        );
        """
    )
    cur.execute(
        """
        CREATE TABLE IF NOT EXISTS completions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            task_id INTEGER NOT NULL,
            done_date TEXT NOT NULL          -- YYYY-MM-DD in Europe/Prague
        );
        """
    )
    cur.execute(
        """
        CREATE TABLE IF NOT EXISTS leaderboard (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            week_start TEXT NOT NULL,        -- Monday YYYY-MM-DD (Europe/Prague)
            points INTEGER NOT NULL
        );
        """
    )
    cur.execute(
        """
        CREATE TABLE IF NOT EXISTS timezones (
            user_id INTEGER PRIMARY KEY,
            tz_name TEXT NOT NULL
        );
        """
    )
    conn.commit()
    conn.close()


# Utility functions

def iso_week_monday(d: date) -> date:
    return d - timedelta(days=(d.isoweekday() - 1))


def today_for_user(user_id: int) -> date:
    return datetime.now(get_user_tz(user_id)).date()

def now_for_user(user_id: int) -> datetime:
    return datetime.now(get_user_tz(user_id))


def parse_time_str(s: str) -> time | None:
    try:
        hh, mm = s.strip().split(":")
        hh, mm = int(hh), int(mm)
        if 0 <= hh <= 23 and 0 <= mm <= 59:
            return time(hh, mm)
        return None
    except Exception:
        return None


def upsert_leaderboard_points(user_id: int, week_start: date, delta: int):
    conn = db()
    cur = conn.cursor()
    ws = week_start.isoformat()
    cur.execute("SELECT id, points FROM leaderboard WHERE user_id=? AND week_start=?", (user_id, ws))
    row = cur.fetchone()
    if row:
        cur.execute("UPDATE leaderboard SET points=? WHERE id=?", (row[1] + delta, row[0]))
    else:
        cur.execute("INSERT INTO leaderboard (user_id, week_start, points) VALUES (?,?,?)", (user_id, ws, delta))
    conn.commit()
    conn.close()


def get_user(chat_user_id: int):
    conn = db()
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE user_id=?", (chat_user_id,))
    row = cur.fetchone()
    conn.close()
    return row

def get_user_tz(user_id: int) -> ZoneInfo:
    conn = db()
    cur = conn.cursor()
    cur.execute("SELECT tz_name FROM timezones WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    conn.close()
    tz_name = row[0] if row else "Europe/Prague"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ü—Ä–∞–≥–∞
    return ZoneInfo(tz_name)

def set_user_tz(user_id: int, tz_name: str):
    conn = db()
    cur = conn.cursor()
    cur.execute(
        "INSERT OR REPLACE INTO timezones (user_id, tz_name) VALUES (?, ?)",
        (user_id, tz_name)
    )
    conn.commit()
    conn.close()

def ensure_user(update: Update):
    u = update.effective_user
    conn = db()
    cur = conn.cursor()
    cur.execute("SELECT id FROM users WHERE user_id=?", (u.id,))
    row = cur.fetchone()
    if not row:
        cur.execute(
            "INSERT INTO users (user_id, chat_id, username) VALUES (?,?,?)",
            (u.id, update.effective_chat.id, u.username or "")
        )
        conn.commit()
    conn.close()


# =====================
# Conversation to create a task
# =====================
ASK_NAME, ASK_TIME, ASK_DAYS, CONFIRM = range(4)


def days_keyboard(selected: set[int] | None = None) -> InlineKeyboardMarkup:
    selected = selected or set()
    labels = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    rows = []
    row = []
    for i, lbl in enumerate(labels, start=1):
        prefix = "‚úÖ " if i in selected else "‚ñ´Ô∏è "
        row.append(InlineKeyboardButton(prefix + lbl, callback_data=f"toggle_day:{i}"))
        if len(row) == 4:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="days_done")])
    return InlineKeyboardMarkup(rows)


async def newtask_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ensure_user(update)
    await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê–Ω–≥–ª–∏–π—Å–∫–∏–π 30 –º–∏–Ω)")
    return ASK_NAME


async def newtask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["task_name"] = update.message.text.strip()
    await update.message.reply_text("–í–æ —Å–∫–æ–ª—å–∫–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å? –ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä 09:00)")
    return ASK_TIME


async def newtask_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    t = parse_time_str(update.message.text)
    if not t:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∏–º–µ—Ä: 07:30")
        return ASK_TIME
    context.user_data["task_time"] = t.strftime("%H:%M")
    context.user_data["task_days"] = set()
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ (–Ω–∞–∂–∏–º–∞–π, –∑–∞—Ç–µ–º '–ì–æ—Ç–æ–≤–æ')",
        reply_markup=days_keyboard(set())
    )
    return ASK_DAYS


async def newtask_days_toggle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    action, val = q.data.split(":")
    sel: set[int] = context.user_data.get("task_days", set())
    d = int(val)
    if d in sel:
        sel.remove(d)
    else:
        sel.add(d)
    context.user_data["task_days"] = sel
    await q.edit_message_reply_markup(reply_markup=days_keyboard(sel))


async def newtask_days_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    sel: set[int] = context.user_data.get("task_days", set())
    if not sel:
        await q.edit_message_text("–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å. –í—ã–±–µ—Ä–∏ –¥–Ω–∏ –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏ '–ì–æ—Ç–æ–≤–æ'.")
        return ASK_DAYS
    # Save to DB
    name = context.user_data["task_name"]
    time_str = context.user_data["task_time"]
    days_csv = ",".join(str(x) for x in sorted(sel))

    u = update.effective_user
    conn = db()
    cur = conn.cursor()
    cur.execute(
        "INSERT INTO tasks (user_id, name, time_str, days, created_at) VALUES (?,?,?,?,?)",
        (u.id, name, time_str, days_csv, now_for_user(update.effective_user.id).isoformat())
    )
    conn.commit()
    conn.close()

# üëâ —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞—ë–º 3 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    schedule_task_jobs(context.application, u.id, name, time_str, days_csv)

    await q.edit_message_text(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {name}\n–í—Ä–µ–º—è: {time_str}\n–î–Ω–∏: {days_csv}")

# (—Å—Ç–∞—Ä—ã–π –æ–±—â–∏–π –ø–µ—Ä–µ—Å—á—ë—Ç –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
# await schedule_all_user_tasks(update.get_bot(), u.id)
    return ConversationHandler.END


async def cancel_conv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# =====================
# List tasks & mark as done
# =====================
async def mytasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ensure_user(update)
    u = update.effective_user
    conn = db()
    cur = conn.cursor()
    cur.execute("SELECT id, name, time_str, days FROM tasks WHERE user_id=? ORDER BY id DESC", (u.id,))
    rows = cur.fetchall()
    conn.close()

    if not rows:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –°–æ–∑–¥–∞–π —á–µ—Ä–µ–∑ /newtask")
        return


    # Build a message per task with a Done button
    today = today_for_user(update.effective_user.id)
    iso_wd = today.isoweekday()
    for r in rows:
        task_id, name, times, days = r[0], r[1], r[2], r[3]
        scheduled_today = str(iso_wd) in days.split(",")
        # Check if already done today
        conn = db()
        cur = conn.cursor()
        cur.execute("SELECT 1 FROM completions WHERE task_id=? AND done_date=?", (task_id, today.isoformat()))
        done = cur.fetchone() is not None
        conn.close()

        btns = []
        if scheduled_today and not done:
            btns = [[InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (—Å–µ–≥–æ–¥–Ω—è)", callback_data=f"done:{task_id}")]]
        elif done:
            btns = [[InlineKeyboardButton("‚úîÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è", callback_data="noop")]]
        else:
            btns = [[InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è –Ω–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é", callback_data="noop")]]
        await update.message.reply_text(
            f"üìù {name}\n‚è∞ {times}\nüìÖ –î–Ω–∏: {days}\n",
            reply_markup=InlineKeyboardMarkup(btns)
        )


async def mark_done_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    _, task_id_s = q.data.split(":", 1)
    task_id = int(task_id_s)
    today = today_for_user(update.effective_user.id)

    # Check if already marked
    conn = db()
    cur = conn.cursor()
    cur.execute("SELECT 1 FROM completions WHERE task_id=? AND done_date=?", (task_id, today.isoformat()))
    if cur.fetchone():
        await q.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úîÔ∏è –£–∂–µ –æ—Ç–º–µ—á–µ–Ω–æ", callback_data="noop")]]))
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await q.message.reply_text(
            "üí™ –û—Ç–ª–∏—á–Ω–æ, —Ç—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å –∑–∞–¥–∞—á–µ–π –∏ –ø–æ–ª—É—á–∏–ª 10 –º–æ–Ω–µ—Ç! "
            "–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ —É –¥—Ä—É–≥–∏—Ö —á–µ—Ä–µ–∑ /leaderboard üëÄ"
        )
        conn.close()
        return

    # Insert completion
    cur.execute("INSERT INTO completions (task_id, done_date) VALUES (?,?)", (task_id, today.isoformat()))

    # Add 10 points to leaderboard for current week
    cur.execute("SELECT user_id FROM tasks WHERE id=?", (task_id,))
    row = cur.fetchone()
    user_id = row[0]
    conn.commit()
    conn.close()

    upsert_leaderboard_points(user_id, iso_week_monday(today), 10)

    await q.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úîÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω–æ!", callback_data="noop")]]))


# =====================
# Progress & Leaderboard
# =====================
TIMEZONE_OPTIONS = {
    "Europe/Prague": "üá®üáø –ï–≤—Ä–æ–ø–∞/–ü—Ä–∞–≥–∞",
    "Asia/Baku": "üá¶üáø –ë–∞–∫—É",
    "Europe/Moscow": "üá∑üá∫ –ú–æ—Å–∫–≤–∞"
}

async def settimezone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(label, callback_data=f"settz:{tz}")]
        for tz, label in TIMEZONE_OPTIONS.items()
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def settimezone_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    tz = q.data.split(":")[1]
    user_id = update.effective_user.id
    set_user_tz(user_id, tz)
    await q.edit_message_text(f"‚úÖ –¢–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {TIMEZONE_OPTIONS[tz]}")
    
async def progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    conn = db()
    cur = conn.cursor()
    cur.execute("SELECT id, name, time_str, days FROM tasks WHERE user_id=?", (u.id,))
    tasks_rows = cur.fetchall()
    if not tasks_rows:
        conn.close()
        await update.message.reply_text("–ù–µ—Ç –∑–∞–¥–∞—á. –°–æ–∑–¥–∞–π —á–µ—Ä–µ–∑ /newtask")
        return

    # current week range
    today = today_for_user(update.effective_user.id)
    week_start = iso_week_monday(today)
    week_dates = [(week_start + timedelta(days=i)).isoformat() for i in range(7)]

    lines = ["üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:"]
    total_points = 0

    for t in tasks_rows:
        tid, name, _, days_csv = t[0], t[1], t[2], t[3]
        days = set(int(x) for x in days_csv.split(","))
        scheduled_dates = [d for d in week_dates if date.fromisoformat(d).isoweekday() in days]

        cur.execute("SELECT done_date FROM completions WHERE task_id=? AND done_date BETWEEN ? AND ?",
                    (tid, week_start.isoformat(), (week_start + timedelta(days=6)).isoformat()))
        done_dates = {r[0] for r in cur.fetchall()}

        done_count = len(done_dates)
        sched_count = len(scheduled_dates)
        points_now = done_count * 10
        total_points += points_now
        percent = int(round((done_count / sched_count) * 100)) if sched_count else 0
        lines.append(f"‚Ä¢ {name}: {done_count}/{sched_count} ({percent}%) ‚Üí {points_now} –º–æ–Ω–µ—Ç")

    # Leaderboard points so far (without weekly bonus)
    cur.execute("SELECT points FROM leaderboard WHERE user_id=? AND week_start=?", (u.id, week_start.isoformat()))
    row = cur.fetchone()
    lb_points = row[0] if row else 0
    conn.close()

    lines.append("")
    lines.append(f"üí∞ –¢–≤–æ–∏ –º–æ–Ω–µ—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é (–±–µ–∑ –±–æ–Ω—É—Å–æ–≤): {lb_points}")
    lines.append("üîî –í –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –¥–æ–±–∞–≤—è—Ç—Å—è –±–æ–Ω—É—Å—ã (+30 –∑–∞ –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É, –≥–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–Ω–∏).")

    await update.message.reply_text("\n".join(lines))


# async def leaderboard_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     today = today_for_user(update.effective_user.id)
#     week_start = iso_week_monday(today)
#     conn = db()
#     cur = conn.cursor()
#     cur.execute(
#         "SELECT user_id, points FROM leaderboard WHERE week_start=? ORDER BY points DESC LIMIT 10",
#         (week_start.isoformat(),)
#     )
#     rows = cur.fetchall()
#
#     if not rows:
#         conn.close()
#         await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –æ—á–∫–æ–≤ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é. –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞—á–∏!")
#         return
#
#     lines = ["üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ (—ç—Ç–∞ –Ω–µ–¥–µ–ª—è):"]
#     for i, r in enumerate(rows, start=1):
#         uid, pts = r[0], r[1]
#         cur.execute("SELECT username FROM users WHERE user_id=?", (uid,))
#         ur = cur.fetchone()
#         uname = ur[0] if ur and ur[0] else str(uid)
#         lines.append(f"{i}. @{uname} ‚Äî {pts} –º–æ–Ω–µ—Ç")
#
#     conn.close()
#     await update.message.reply_text("\n".join(lines))

async def leaderboard_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    today = today_for_user(update.effective_user)
    week_start = iso_week_monday(today)

    conn = db()
    cur = conn.cursor()
    cur.execute(
        "SELECT user_id, points FROM leaderboard WHERE week_start=? ORDER BY points DESC",
        (week_start.isoformat(),)
    )
    rows = cur.fetchall()
    conn.close()

    if not rows:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –æ—á–∫–æ–≤ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é. –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ä–µ–π—Ç–∏–Ω–≥ üí™")
        return

    # –°—á–∏—Ç–∞–µ–º –º–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    total = len(rows)
    rank = next((i + 1 for i, (uid, _) in enumerate(rows) if uid == user_id), None)
    user_points = next((pts for uid, pts in rows if uid == user_id), 0)

    if rank:
        await update.message.reply_text(
            f"üèÜ –¢—ã –Ω–∞ {rank}-–º –º–µ—Å—Ç–µ –∏–∑ {total} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–∏!\n"
            f"üí™ –£ —Ç–µ–±—è {user_points} –æ—á–∫–æ–≤."
        )
    else:
        await update.message.reply_text(
            "–¢—ã –µ—â—ë –Ω–µ –ø–æ–ø–∞–ª –≤ —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤. –î–µ–ª–∞–π –∑–∞–¥–∞—á–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –æ—á–∫–∏ üí•"
        )


# =====================
# Weekly bonus job
# =====================
async def weekly_bonus_and_summary(app: Application):
    """
    Runs every Monday 00:01 Prague time:
    - For previous week, calculate for each user and each task if all scheduled days were completed; if yes, add +30 points.
    - Send personal summary for previous week.
    """
    # We are on Monday, so previous week = today - 7 days
    today = today_for_user(update.effective_user.id)
    prev_week_start = iso_week_monday(today - timedelta(days=7))
    prev_week_end = prev_week_start + timedelta(days=6)

    conn = db()
    cur = conn.cursor()
    cur.execute("SELECT user_id, chat_id, COALESCE(username,'') FROM users")
    users = cur.fetchall()

    for u in users:
        uid, chat_id, uname = u[0], u[1], u[2]
        # Load tasks
        cur.execute("SELECT id, name, days FROM tasks WHERE user_id=?", (uid,))
        trows = cur.fetchall()
        if not trows:
            continue

        lines = [f"üìÖ –ò—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏ ({prev_week_start.isoformat()} ‚Äî {prev_week_end.isoformat()}):"]
        bonus_total = 0
        base_points = 0

        for t in trows:
            tid, name, days_csv = t[0], t[1], t[2]
            days = set(int(x) for x in days_csv.split(",")) if days_csv else set()
            # Which dates were scheduled last week?
            sched_dates = [
                (prev_week_start + timedelta(days=i)).isoformat()
                for i in range(7) if (prev_week_start + timedelta(days=i)).isoweekday() in days
            ]
            cur.execute(
                "SELECT done_date FROM completions WHERE task_id=? AND done_date BETWEEN ? AND ?",
                (tid, prev_week_start.isoformat(), prev_week_end.isoformat())
            )
            done_dates = {r[0] for r in cur.fetchall()}
            done_count = len(done_dates)
            sched_count = len(sched_dates)
            base = done_count * 10
            base_points += base

            bonus = 30 if sched_count > 0 and done_count == sched_count else 0
            bonus_total += bonus

            status = f"{done_count}/{sched_count} ‚Üí {base} –º–æ–Ω–µ—Ç"
            if bonus:
                status += " + üéÅ 30 –±–æ–Ω—É—Å"
            lines.append(f"‚Ä¢ {name}: {status}")

        # Update leaderboard with bonuses
        if bonus_total:
            upsert_leaderboard_points(uid, prev_week_start, bonus_total)

        cur.execute("SELECT points FROM leaderboard WHERE user_id=? AND week_start=?", (uid, prev_week_start.isoformat()))
        row = cur.fetchone()
        total_points = row[0] if row else base_points + bonus_total
        lines.append("")
        lines.append(f"üí∞ –ò—Ç–æ–≥–æ –∑–∞ –Ω–µ–¥–µ–ª—é: {total_points} –º–æ–Ω–µ—Ç")

        try:
            await app.bot.send_message(chat_id=chat_id, text="\n".join(lines))
        except Exception as e:
            logger.warning(f"Failed to send weekly summary to {uid}: {e}")

    conn.close()


# =====================
# Reminders
# =====================
async def send_task_reminder(app: Application, user_id: int, task_id: int):
    conn = db()
    cur = conn.cursor()
    cur.execute("SELECT chat_id FROM users WHERE user_id=?", (user_id,))
    urow = cur.fetchone()
    if not urow:
        conn.close()
        return
    chat_id = urow[0]
    cur.execute("SELECT name, time_str, days FROM tasks WHERE id=?", (task_id,))
    trow = cur.fetchone()
    conn.close()
    if not trow:
        return

    name, time_str, days_csv = trow[0], trow[1], trow[2]
    today = today_for_user(update.effective_user.id)
    if str(today.isoweekday()) not in (days_csv or "").split(","):
        return  # Not scheduled today

    btn = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done:{task_id}")]])
    try:
        await app.bot.send_message(chat_id=chat_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {name} –≤ {time_str}", reply_markup=btn)
    except Exception as e:
        logger.warning(f"Reminder send failed: {e}")


async def schedule_all_user_tasks(bot_app: Application, user_id: int | None = None):
    """Schedule reminder jobs for all tasks (or for a single user's tasks). Uses Application.job_queue."""
    jq = bot_app.job_queue
    conn = db()
    cur = conn.cursor()
    if user_id:
        cur.execute("SELECT id, user_id, time_str FROM tasks WHERE user_id=?", (user_id,))
    else:
        cur.execute("SELECT id, user_id, time_str FROM tasks")
    tasks_rows = cur.fetchall()
    conn.close()

    for t in tasks_rows:
        tid, uid, time_str = t[0], t[1], t[2]
        hh, mm = map(int, time_str.split(":"))
        # Schedule daily at HH:MM Europe/Prague; we'll check inside if today is scheduled
        jq.run_daily(
            lambda ctx: asyncio.create_task(send_task_reminder(bot_app, uid, tid)),
            time=time(hh, mm, tzinfo=TZ),
            name=f"reminder_{tid}",
            days=(0, 1, 2, 3, 4, 5, 6),
            job_kwargs={"misfire_grace_time": 300}
        )


# =====================
# Commands
# =====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ensure_user(update)
    msg = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ üí™\n\n"
        "üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/newtask ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º\n"
        "/mytasks ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n"
        "/delete ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n"
        "/progress ‚Äî –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "/leaderboard ‚Äî —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤\n"
        "/settimezone ‚Äî –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–ü—Ä–∞–≥–∞, –ë–∞–∫—É, –ú–æ—Å–∫–≤–∞)\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "üí∞ –ó–∞ –∫–∞–∂–¥–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é ‚Äî 10 –º–æ–Ω–µ—Ç.\n"
        "üéÅ –ï—Å–ª–∏ –≤—Å—é –Ω–µ–¥–µ–ª—é –≤—ã–ø–æ–ª–Ω—è–µ—à—å –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–Ω–∏ –ø–æ –∑–∞–¥–∞—á–µ ‚Äî +30 –±–æ–Ω—É—Å–Ω—ã—Ö –º–æ–Ω–µ—Ç.\n"
        "üëë –°–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–∑—å—è–º–∏ —á–µ—Ä–µ–∑ /leaderboard!"
    )
    await update.message.reply_text(msg)


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)


# =====================
# Main
# =====================

# =====================
# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
# =====================

async def delete_task_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    conn = db()
    cur = conn.cursor()
    cur.execute("SELECT id, name, time_str FROM tasks WHERE user_id=?", (u.id,))
    rows = cur.fetchall()
    conn.close()

    if not rows:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    keyboard = [
        [InlineKeyboardButton(f"üóë {r[1]} ({r[2]})", callback_data=f"delete:{r[0]}")]
        for r in rows
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def delete_task_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    task_id = int(q.data.split(":")[1])

    conn = db()
    cur = conn.cursor()
    cur.execute("DELETE FROM tasks WHERE id=?", (task_id,))
    conn.commit()
    conn.close()

    await q.edit_message_text("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")

    ##

from datetime import date, datetime, timedelta, time
from zoneinfo import ZoneInfo

def schedule_task_jobs(app, user_id: int, name: str, time_str: str, days_csv: str):
    """–°–æ–∑–¥–∞—ë—Ç 3 –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–∂–æ–±–∞ –ø–æ –∑–∞–¥–∞—á–µ: –∑–∞ 10 –º–∏–Ω, –≤ –º–æ–º–µ–Ω—Ç —Å—Ç–∞—Ä—Ç–∞ –∏ —á–µ—Ä–µ–∑ —á–∞—Å.
       –í—Ä–µ–º—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤ –ß–ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    tz = get_user_tz(user_id)
    days = [int(d) for d in days_csv.split(",")]
    h, m = map(int, time_str.split(":"))

    base_local = time(hour=h, minute=m, tzinfo=tz)

    def shift(t: time, delta: timedelta) -> time:
        dt = datetime.combine(date.today(), t)
        return (dt + delta).timetz()  # time —Å tzinfo

    jq = app.job_queue

    # ‚è∞ –í –º–æ–º–µ–Ω—Ç –Ω–∞—á–∞–ª–∞
    jq.run_daily(
        lambda ctx, uid=user_id, n=name: ctx.bot.send_message(uid, f"‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É: {n}! üí™"),
        time=base_local,
        days=days,
        name=f"task_start_{user_id}_{name}"
    )

    # ‚ö†Ô∏è –ó–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞
    jq.run_daily(
        lambda ctx, uid=user_id, n=name: ctx.bot.send_message(uid, f"‚ö†Ô∏è –ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –Ω–∞—á–∏–Ω–∞–π: {n}!"),
        time=shift(base_local, timedelta(minutes=-10)),
        days=days,
        name=f"task_early_{user_id}_{name}"
    )

    # ‚úÖ –ß–µ—Ä–µ–∑ 1 —á–∞—Å –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞
    jq.run_daily(
        lambda ctx, uid=user_id, n=name: ctx.bot.send_message(uid, f"‚úÖ {n} –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å! –í—ã–ø–æ–ª–Ω–∏–ª? –ù–∞–ø–∏—à–∏ /done"),
        time=shift(base_local, timedelta(hours=1)),
        days=days,
        name=f"task_check_{user_id}_{name}"
    )

def main():
    init_db()
    app = Application.builder().token(TOKEN).build()

    # Conversation for /newtask
    conv = ConversationHandler(
        entry_points=[CommandHandler("newtask", newtask_start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, newtask_name)],
            ASK_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, newtask_time)],
            ASK_DAYS: [CallbackQueryHandler(newtask_days_toggle, pattern=r"^toggle_day:\d+$"),
                       CallbackQueryHandler(newtask_days_done, pattern=r"^days_done$")],
        },
        fallbacks=[CommandHandler("cancel", cancel_conv)],
        allow_reentry=True,
    )

    app.add_handler(conv)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("mytasks", mytasks))
    app.add_handler(CommandHandler("progress", progress))
    app.add_handler(CommandHandler("leaderboard", leaderboard_cmd))

    app.add_handler(CommandHandler("delete", delete_task_menu))
    app.add_handler(CallbackQueryHandler(delete_task_cb, pattern=r"^delete:\d+$"))
    app.add_handler(CommandHandler("settimezone", settimezone))
    app.add_handler(CallbackQueryHandler(settimezone_cb, pattern=r"^settz:.+$"))

    app.add_handler(CallbackQueryHandler(mark_done_cb, pattern=r"^done:\d+$"))
    app.add_handler(CallbackQueryHandler(lambda u, c: u.callback_query.answer(), pattern=r"^noop$"))

    # Schedule weekly bonus job: every Monday 00:01 Prague
    app.job_queue.run_daily(
        lambda ctx: asyncio.create_task(weekly_bonus_and_summary(app)),
        time=time(0, 1, tzinfo=TZ),
        days=(0,),  # Monday
        name="weekly_bonus"
    )

    # Load reminder jobs for all tasks
    async def on_startup(app):
        await schedule_all_user_tasks(app)

    app.post_init = on_startup

    logger.info("Bot starting with long polling...")

    # --- –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
    conn = db()
    cur = conn.cursor()
    cur.execute("SELECT user_id, name, time_str, days FROM tasks")
    tasks = cur.fetchall()
    conn.close()

    for user_id, name, time_str, days_csv in tasks:
        try:
            schedule_task_jobs(app, user_id, name, time_str, days_csv)
            logger.info(f"üîÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è '{name}' (user {user_id})")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {name}: {e}")

    app.run_polling()


if __name__ == "__main__":
    main()
